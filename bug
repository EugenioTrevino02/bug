import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from sensor_msgs.msg import LaserScan
import math

class Bug0Simple(Node):
    def __init__(self):
        super().__init__('bug0_simple_node')

        # Publishers and subscribers
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        self.scan_sub = self.create_subscription(LaserScan, '/scan', self.scan_callback, 10)
        self.odom_sub = self.create_subscription(Odometry, '/odom', self.odom_callback, 10)

        self.timer = self.create_timer(0.1, self.control_loop)

        # Robot state
        self.current_position = None
        self.yaw = 0.0
        self.scan_data = None

        # Goal
        self.goal = (5.0, 5.0)

        # Parameters
        self.obstacle_distance_threshold = 0.6  # meters
        self.linear_speed = 0.2
        self.angular_speed = 0.5  # radians/sec
        self.goal_tolerance = 0.3

    def odom_callback(self, msg):
        # Get robot position
        self.current_position = (
            msg.pose.pose.position.x,
            msg.pose.pose.position.y
        )

        # Get robot yaw
        q = msg.pose.pose.orientation
        siny_cosp = 2.0 * (q.w * q.z + q.x * q.y)
        cosy_cosp = 1.0 - 2.0 * (q.y * q.y + q.z * q.z)
        self.yaw = math.atan2(siny_cosp, cosy_cosp)

    def scan_callback(self, msg):
        self.scan_data = msg.ranges

    def control_loop(self):
        if self.current_position is None or self.scan_data is None:
            return

        twist = Twist()

        # Check if goal reached
        dx = self.goal[0] - self.current_position[0]
        dy = self.goal[1] - self.current_position[1]
        distance_to_goal = math.hypot(dx, dy)

        if distance_to_goal < self.goal_tolerance:
            self.get_logger().info("ðŸŽ¯ Goal reached!")
            self.cmd_vel_pub.publish(twist)  # Stop
            return

        # Compute angle to goal
        angle_to_goal = math.atan2(dy, dx)
        angle_error = angle_to_goal - self.yaw
        angle_error = math.atan2(math.sin(angle_error), math.cos(angle_error))  # Normalize

        # Check for obstacle in front 180Â°
        front_ranges = list(self.scan_data[0:90]) + list(self.scan_data[270:360])
        obstacle_ahead = any(r < self.obstacle_distance_threshold for r in front_ranges)

        if obstacle_ahead:
            # Turn right in place
            twist.linear.x = 0.0
            twist.angular.z = -self.angular_speed
        else:
            # Go toward goal
            twist.linear.x = self.linear_speed

            # Clamp angular.z to limit
            max_angular = 1.0
            twist.angular.z = max(-max_angular, min(max_angular, angle_error))

        self.cmd_vel_pub.publish(twist)

def main(args=None):
    rclpy.init(args=args)
    node = Bug0Simple()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
